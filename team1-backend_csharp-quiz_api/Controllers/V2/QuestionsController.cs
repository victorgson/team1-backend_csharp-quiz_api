using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using team1_backend_csharp_quiz_api.Contracts;
using team1_backend_csharp_quiz_api.Entities;
using team1_backend_csharp_quiz_api.Persistance;
using team1_backend_csharp_quiz_api.DTO;
using team1_backend_csharp_quiz_api.DTO.Question;
using team1_backend_csharp_quiz_api.Services;

namespace team1_backend_csharp_quiz_api.Controllers.V2
{
    [Route("api/v2/[controller]")]
    [ApiExplorerSettings(GroupName = "v2")]
    [ApiController]

    public class QuestionsController : ControllerBase
    {
 
        private readonly ITriviaService _triviaService;
        private readonly IQuestionService _questionService;

        public QuestionsController(ITriviaService triviaService, IQuestionService questionService)
        {
            this._triviaService = triviaService;
            this._questionService = questionService;

        }

        // GET: api/v2/Questions

        /// <summary>
        /// Gets all Questions from Databas
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <response code="200">Returns all Questions-objects in an Array</response>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<GetQuestionDto>>> GetQuestions() => Ok(await _questionService.GetQuestionsList());

        // GET: api/v2/Questions/id
        /// <summary>
        /// Gets one Question with specified Guid ID
        /// </summary>
        /// <param name="id"> ID of the question to get.</param>
        [HttpGet("{id}")]
        public async Task<ActionResult<GetQuestionDto>> GetQuestion(Guid id)
        {

            var question = await _questionService.GetQuestion(id);

            return (question != null ? Ok(question) : NotFound());

        }

        // GET: api/v2/Questions/id

        /// <summary>
        /// Gets random Question from either Database or Trivia API.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <response code="200">Returns Question Object</response>
        /// <response code="404">Returns NotFound, could not find ID in Database</response>
        [HttpGet]
        [Route("/api/v1/Questions/Random")]
        public async Task<ActionResult<Question>> GetRandomQuestion()
        {
            var question = await _triviaService.GetRandomQuestion();

            return (question is null ? NotFound() : Ok(question));

        }

        // PUT: api/v2/Questions/id
        /// <summary>
        /// Updates Question with specified Guid Id. Include same Id in body also, they must match.
        /// </summary>
        /// <param name="id"> ID of the question to update.</param> 
        [HttpPut("{id}")]
        public async Task<IActionResult> PutQuestion(Guid id, UpdateQuestionDto questionDto)
        {
            if (id != questionDto.Id)
            {
                return BadRequest();
            }

            try
            {
                await _questionService.UpdateQuestion(id, questionDto);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (! await QuestionExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/v2/Questions/
        /// <summary>
        /// Adds a new Question in Database with autogenerated Guid Id. 
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<Question>> PostQuestion(CreateQuestionDto createQuestionDto)
        {

            var question = await _questionService.AddQuestion(createQuestionDto);

            return CreatedAtAction("GetQuestion", new { id = question.Id }, question);
        }

        // DELETE: api/v2/Questions/id
        /// <summary>
        /// Deletes Question with specified Guid Id.
        /// </summary>
        /// <param name="id"> ID of the question to delete.</param>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuestion(Guid id)
        {

            var success = await _questionService.RemoveQuestion(id);

            return (success ? NoContent() : BadRequest("Question ID was not found."));


        }

        private async Task<bool> QuestionExists(Guid id)
        {
            return await _questionService.QuestionExists(id);

        }
    }
}